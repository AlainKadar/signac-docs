0.9.2
-----

  * Enable the write_concern flag for the job.document JSONDict.

  * Fix critical issue in the JSONDict implementation that would previously overwrite the underlying file when attempting to store values that are not JSON serializable.

  * Fix issue where the export() function would ignore the update argument when the index to export to would be a MongoDB collection.

  * Allow to omit the specification of an authentication mechanism in the MongoDB host configuration.

  * Add provisional feature (persistent state point caching); calling the Project.update_cache() method will generate and store a persistent state point cache in the project root directory, which will increase the speed of many project iteration, search, and selection operations.
  
  * Add Project.check() method which checks for workspace corruption, but does not make any attempt to repair it.
  
  * The Project.repair() method will attempt to repair jobs, that have been corrupted by manually renaming the job's workspace directory.

0.9.1
-----

	* Fix critical issue in the SyncedAttrDict implementation that would previously overwrite the underlying file if the first operation was a __setitem__() operation.

0.9.0
-----

	* Introduction of `$ signac sync`, `Project.sync()`, and `Job.sync()` for the simplified and fine-grained synchronization of multiple project data spaces.

	* Introduction of `$ signac schema` and `Project.detect_schema()` for the automatic detection of the implicit and semi-structured state point schema of a project data space.

	* Simplified aggregation of jobs over projects and `Project.find_jobs()` results with the `Project.groupby()` function.

	* Support for project-centralized data with the `Project.document` attribute and the `Project.fn()` method for the wrapping of filenames within the project root directory.

	* Both `Job.statepoint` and `Job.document` now use the same underlying data structure and provide the exact same API (copy with () and access of keys as attributes).

	* Added the `Job.clear()` and the `Job.reset()` methods to clear or reset a job's workspace data.

	* The `Collection` class uses an internal counter instead of UUIDs for the generation of primary keys (resulting in improved performance).

	* Major performance improvements (faster Collection, improved caching)

	* Overhaul of the reference documentation.

	* Overall API consolidation.
